[
	{
		"id": "toussaintEuclideanAlgorithmGenerates2005",
		"type": "paper-conference",
		"abstract": "The Euclidean algorithm (which comes down to us from Euclid's Elements) computes the greatest common divisor of two given integers. It is shown here that the structure of the Euclidean algorithm may be used to automatically generate, very efficiently, a large family of rhythms used as timelines (ostinatos), in traditional world music. These rhythms, here dubbed Euclidean rhythms, have the property that their onset patterns are distributed as evenly as possible in a mathematically precise sense, and optimal manner.",
		"container-title": "In Proceedings of BRIDGES: Mathematical Connections in Art, Music and Science",
		"page": "47–56",
		"title": "The Euclidean Algorithm Generates Traditional Musical Rhythms",
		"URL": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.62.231",
		"author": [
			{
				"family": "Toussaint",
				"given": "Godfried"
			}
		],
		"issued": {
			"date-parts": [
				[
					"2005"
				]
			]
		}
	},
	{
		"id": "roberts2015",
		"type": "paper-conference",
		"abstract": "We describe research extending the interactive affordances of textual code fragments in creative coding environments. In particular we examine the potential of source code both to display the state of running processes and also to alter state using means other than traditional text editing. In contrast to previous research that has focused on the inclusion of additional interactive widgets inside or alongside text editors, our research adds a parsing stage to the runtime evaluation of code fragments and imparts additional interactive capabilities on the source code itself. After implementing various techniques in the creative coding environment Gibber, we evaluate our research through a survey on the various methods of visual feedback provided by our research. In addition to results quantifying preferences for certain techniques over others, we found near unanimous support among survey respondents for including similar techniques in other live coding environments.",
		"collection-title": "NIME 2015",
		"container-title": "Proceedings of the international conference on New Interfaces for Musical Expression",
		"event-place": "Baton Rouge, Louisiana, USA",
		"ISBN": "978-0-692-49547-6",
		"page": "126–131",
		"publisher": "The School of Music and the Center for Computation and Technology (CCT), Louisiana State University",
		"publisher-place": "Baton Rouge, Louisiana, USA",
		"source": "ACM Digital Library",
		"title": "Beyond Editing: Extended Interaction with Textual Code Fragments",
		"title-short": "Beyond Editing",
		"author": [
			{
				"family": "Roberts",
				"given": "Charles"
			},
			{
				"family": "Wright",
				"given": "Matthew"
			},
			{
				"family": "Kuchera-Morin",
				"given": "JoAnn"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2021",
					1,
					27
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2015",
					5,
					30
				]
			]
		}
	},
	{
		"id": "rohrhuberSuperDirt2022",
		"type": "software",
		"abstract": "Tidal Audio Engine",
		"genre": "SuperCollider",
		"license": "GPL-2.0",
		"note": "original-date: 2015-11-03T20:18:44Z",
		"publisher": "musikinformatik",
		"source": "GitHub",
		"title": "SuperDirt",
		"URL": "https://github.com/musikinformatik/SuperDirt",
		"author": [
			{
				"family": "Rohrhuber",
				"given": "Julian"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2022",
					6,
					24
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2022",
					6,
					24
				]
			]
		}
	},
	{
		"id": "mcleanAlgorithmicPattern2020",
		"type": "paper-conference",
		"abstract": "This paper brings together two main perspectives on algorithmic pattern. First, the writing of musical patterns in live coding performance, and second, the weaving of patterns in textiles. In both cases, algorithmic pattern is an interface between the human and the outcome, where small changes have far-reaching impact on the results. By bringing contemporary live coding and ancient textile approaches together, we reach a common view of pattern as algorithmic movement (e.g. looping, shifting, reflecting, interfering) in the making of things. This works beyond the usual definition of pattern used in musical interfaces, of mere repeating sequences. We conclude by considering the place of algorithmic pattern in a wider activity of making.",
		"container-title": "Proceedings of the International Conference on New Interfaces for Musical Expression",
		"event-place": "Birmingham, UK",
		"event-title": "NIME2020",
		"page": "265--270",
		"publisher-place": "Birmingham, UK",
		"title": "Algorithmic Pattern",
		"URL": "https://zenodo.org/record/4813352",
		"author": [
			{
				"family": "Mclean",
				"given": "Alex"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2022",
					1,
					9
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2020",
					6,
					1
				]
			]
		}
	},
	{
		"id": "mcleanFeedforward2020",
		"type": "paper-conference",
		"abstract": "This is an improvised, from-scratch live coding performance. The NIME interface which this performance showcases is the new Feedfoward editor for the TidalCycles live coding environment. Feedforward is written in Haskell using the ncurses library for terminal-based user interfaces. It runs on low-powered hardware including the Raspberry Pi Zero, with formative testing of prototypes conducted with several groups of children between the ages of 8 and 14. Feedforward has a number of features designed to support improvised, multi-pattern live coding. Individual Tidal patterns are addressable with hotkeys for fast mute and unmuting. Each pattern has a stereo VU meter, to aid the quick matching of sound to pattern within a mix. In addition, TidalCycles has been extended to store context with each event, so that source code positions in its polyrhythmic sequence mini-notation are tracked. This allows steps to be highlighted in the source code when- ever they are active. This works even when Tidal combinators have been applied to manipulate the timeline. Formal evaluation has yet to take place, but this feature appears to support learning of how pattern manipulations work in Tidal. Feedforward and TidalCycles is free/open source software under a GPL licence version 3.0.",
		"container-title": "Proceedings of New Interfaces for Musical Expression",
		"event-place": "Birmingham",
		"event-title": "NIME2020",
		"publisher-place": "Birmingham",
		"title": "Feedforward",
		"URL": "https://zenodo.org/record/6353969",
		"author": [
			{
				"family": "McLean",
				"given": "Alex"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2022",
					6,
					24
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2020",
					7,
					21
				]
			]
		}
	},
	{
		"id": "robertsGibberLiveCoding2012",
		"type": "paper-conference",
		"abstract": "We present Gibber: a live coding environment for web browsers. Gibber performances are written in pure Java-Script with no syntactical additions or modifications; this enables Gibber code to be executed in any web page viewed inside a browser implementing a realtime audio API. Gib-ber offers an array of synthesis options (FM, granular, subtractive, physical modeling), audio effects and sequenc-ing objects to control them. The Gibber environment en-ables simple networked performances where multiple users simultaneously control a remote instance of Gibber. We strove to make the syntax of Gibber clear and concise; when coupled with the ability to run examples in any web page this gives Gibber interesting possibilities as an edu-cational tool. 1.",
		"container-title": "In Proceedings of the 2012 International Computer Music Conference",
		"source": "CiteSeer",
		"title": "Gibber: Live coding audio in the browser",
		"title-short": "Gibber",
		"author": [
			{
				"family": "Roberts",
				"given": "Charles"
			},
			{
				"family": "Kuchera-morin",
				"given": "Joann"
			}
		],
		"issued": {
			"date-parts": [
				[
					"2012"
				]
			]
		}
	},
	{
		"id": "ogbornEstuaryBrowserbasedCollaborative2017",
		"type": "paper-conference",
		"abstract": "This paper describes the initial design and development of Estuary, a browser-based collaborative projectional editing environment built on top of the popular TidalCycles language for the live coding of musical pattern. Key features of Estuary include a strict form of structure editing (making syntactical errors impossible), a click-only border-free approach to interface design, explicit notations to modulate the liveness of different parts of the code, and a server-based network collaboration system that can be used for many simultaneous collaborative live coding performances, as well as to present different views of the same live coding activity. Estuary has been developed using Reﬂex-DOM, a Haskell-based framework for web development whose strictness promises robustness and security advantages.",
		"container-title": "Proceedings of the International Conference on Live Coding",
		"event-place": "Morelia",
		"event-title": "ICLC2017",
		"language": "en",
		"page": "11",
		"publisher-place": "Morelia",
		"source": "Zotero",
		"title": "Estuary: Browser-based Collaborative Projectional Live Coding of Musical Patterns",
		"author": [
			{
				"family": "Ogborn",
				"given": "David"
			},
			{
				"family": "Beverley",
				"given": "Jamie"
			},
			{
				"family": "Navarro del Angel",
				"given": "Luis"
			},
			{
				"family": "Tsabary",
				"given": "Eldad"
			},
			{
				"family": "McLean",
				"given": "Alex"
			}
		],
		"issued": {
			"date-parts": [
				[
					"2017"
				]
			]
		}
	},
	{
		"id": "mcleanTidalVortexZero2022",
		"type": "paper-conference",
		"abstract": "In this paper we introduce ‘version zero’ of TidalVortex, an alternative implementation of the TidalCycles live coding system, using the Python programming language.  This is open-ended work, exploring what happens when we try to extract the 'essence' of a system like TidalCycles and translate it into another programming language, while taking advantage of the affordance of its new host. First, we review the substantial prior art in porting TidalCycles, and in representing musical patterns in Python. We then compare equivalent patterns written in Haskell (TidalCycles) and Python (TidalVortex), and relate implementation details of how functional reactive paradigms have translated from the pure functional, strongly typed Haskell to the more multi-paradigm, dynamically typed Python. Finally, we conclude with reflections and generalisable outcomes.",
		"container-title": "Proceedings of the 7th International Conference on Live Coding",
		"DOI": "10.5281/zenodo.6456380",
		"event-place": "Limerick, Ireland",
		"event-title": "ICMC2022",
		"note": "event-title: International Conference on Computer Music (ICMC)",
		"publisher": "Zenodo",
		"publisher-place": "Limerick, Ireland",
		"title": "TidalVortex Zero",
		"URL": "https://zenodo.org/record/6456380/export/hx",
		"author": [
			{
				"family": "McLean",
				"given": "Alex"
			},
			{
				"family": "Forment",
				"given": "Raphaël"
			},
			{
				"family": "Le Beux",
				"given": "Sylvain"
			},
			{
				"family": "Silvani",
				"given": "Damián"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2022",
					6,
					24
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2022",
					4,
					12
				]
			]
		}
	},
	{
		"id": "solomonPurescriptocarina2022",
		"type": "software",
		"abstract": "Web audio graphs as a stream",
		"genre": "PureScript",
		"license": "Apache-2.0",
		"note": "original-date: 2021-03-25T12:19:55Z",
		"source": "GitHub",
		"title": "purescript-ocarina",
		"URL": "https://github.com/mikesol/purescript-ocarina",
		"author": [
			{
				"family": "Solomon",
				"given": "Mike"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2022",
					6,
					24
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2022",
					6,
					20
				]
			]
		}
	},
	{
		"id": "orlareyFaustProgrammingLanguage2023",
		"type": "software",
		"abstract": "Functional programming language for signal processing and sound synthesis",
		"genre": "C++",
		"note": "original-date: 2016-11-05T13:09:11Z",
		"publisher": "GRAME",
		"source": "GitHub",
		"title": "Faust - Programming Language for Audio Applications and Plugins",
		"URL": "https://github.com/grame-cncm/faust",
		"author": [
			{
				"family": "Orlarey",
				"given": "Yann"
			},
			{
				"family": "Fober",
				"given": "Dominique"
			},
			{
				"family": "Letz",
				"given": "Stéphane"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2023",
					3,
					13
				]
			]
		}
	},
	{
		"id": "jackHydra2023",
		"type": "software",
		"abstract": "Livecoding networked visuals in the browser",
		"genre": "JavaScript",
		"license": "AGPL-3.0",
		"note": "original-date: 2022-06-13T16:57:34Z",
		"source": "GitHub",
		"title": "Hydra",
		"URL": "https://github.com/ojack/hydra",
		"author": [
			{
				"family": "Jack",
				"given": "Olivia"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2023",
					3,
					8
				]
			]
		}
	},
	{
		"id": "lanGlicol2023",
		"type": "software",
		"abstract": "Graph-oriented live coding language and music DSP library written in Rust",
		"genre": "Rust",
		"license": "MIT",
		"note": "original-date: 2020-07-13T22:13:33Z",
		"source": "GitHub",
		"title": "Glicol",
		"URL": "https://github.com/chaosprint/glicol",
		"author": [
			{
				"family": "Lan",
				"given": "Qichao"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		}
	},
	{
		"id": "ogbornWebDirt2022",
		"type": "software",
		"abstract": "Sampling engine implemented in Web Audio API (rough re-creation of Dirt)",
		"genre": "JavaScript",
		"license": "GPL-3.0",
		"note": "original-date: 2016-05-04T21:19:04Z",
		"source": "GitHub",
		"title": "WebDirt",
		"URL": "https://github.com/dktr0/WebDirt",
		"author": [
			{
				"family": "Ogborn",
				"given": "David"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2022",
					12,
					14
				]
			]
		}
	},
	{
		"id": "roosStrudelAlgorithmicPatterns2022",
		"type": "paper-conference",
		"abstract": "This paper introduces Strudel (or sometimes StrudelCycles), an alternative implementation of the Tidal (or Tidal-Cycles) live coding system, using the JavaScript programming language. Strudel is an attempt to make live coding more accessible, by creating a system that runs entirely in the browser, while opening Tidals approach to algorithmic patterns (Mclean 2020) up to modern audio/visual web technologies. The Strudel REPL is a live code editor dedicated to manipulating Strudel patterns while they play, with builtin visual feedback. While Strudel is written in JavaScript, the API is optimized for simplicity and readability by applying code transformations on the syntax tree level, allowing language operations that would otherwise be impossible. The application supports multiple ways to output sound, including Tone.js, Web Audio nodes, OSC (Open Sound Control) messages, Web Serial andWeb MIDI. The project is split into multiple packages, allowing granular reuse in other applications. Apart from TidalCycles, Strudel draws inspiration from many prior existing projects like TidalVortex (McLean et al. 2022), Gibber (Roberts and Kuchera-morin 2012), Estuary (Ogborn et al. 2017), Hydra (Jack [2022] 2022), Ocarina (Solomon [2021] 2022) and Feedforward (McLean 2020).",
		"container-title": "Proceedings of Web Audio Conference",
		"event-place": "Cannes, France",
		"event-title": "WAC2022",
		"note": "DOI: 10.5281/zenodo.6821023\npublisher: Zenodo",
		"publisher-place": "Cannes, France",
		"title": "Strudel: Algorithmic Patterns for the Web",
		"URL": "https://zenodo.org/record/6821023",
		"author": [
			{
				"family": "Roos",
				"given": "Felix"
			},
			{
				"family": "McLean",
				"given": "Alex"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2022",
					11,
					29
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2022",
					6,
					28
				]
			]
		}
	},
	{
		"id": "yiWebAssemblyAudioWorkletCsound2018",
		"type": "paper-conference",
		"abstract": "This paper describes WebAssembly AudioWorklet (WAAW)\nCsound, one of the implementations of Web Audio Csound.\nWe begin by introducing the background to this current implementation, stemming from the two first ports of Csound\nto the web platform using Native Clients and asm.js. The\ntechnology of WebAssembly is then introduced and discussed in its more relevant aspects. The AudioWorklet interface of Web Audio API is explored, together with its use in\nWAAW Csound. We complement this discussion by considering the overarching question of support for multiple platforms, which implement different versions of Web Audio.\nSome initial examples of the system are presented to illustrate various potential applications. Finally, we complement\nthe paper by discussing current issues that are fundamental\nfor this project and others that rely on the development of\na robust support for WASM-based audio computing.",
		"event-place": "Berlin, Germany",
		"event-title": "Web Audio Conference WAC-2018",
		"language": "en",
		"publisher-place": "Berlin, Germany",
		"source": "mural.maynoothuniversity.ie",
		"title": "WebAssembly AudioWorklet Csound",
		"URL": "https://mural.maynoothuniversity.ie/16018/",
		"author": [
			{
				"family": "Yi",
				"given": "Steven"
			},
			{
				"family": "Lazzarini",
				"given": "Victor"
			},
			{
				"family": "Costello",
				"given": "Edward"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2018"
				]
			]
		}
	},
	{
		"id": "majdaPeggy2023",
		"type": "software",
		"abstract": "Peggy: Parser generator for JavaScript",
		"genre": "JavaScript",
		"license": "MIT",
		"note": "original-date: 2020-11-21T11:52:39Z",
		"publisher": "peggyjs",
		"source": "GitHub",
		"title": "Peggy",
		"URL": "https://github.com/peggyjs/peggy",
		"author": [
			{
				"family": "Majda",
				"given": "David"
			}
		],
		"accessed": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		},
		"issued": {
			"date-parts": [
				[
					"2023",
					3,
					14
				]
			]
		}
	}
]