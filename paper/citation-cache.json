{
	"_info": "Auto-generated by pandoc-url2cite. Feel free to modify, keys will never be overwritten.",
	"urls": {
		"https://www.tandfonline.com/doi/abs/10.1080/14794713.2016.1227602?journalCode=rpdm20": {
			"fetched": "2022-03-24T12:17:27.481Z",
			"bibtex": [
				"",
				"@article{roberts_code_2016,",
				"   title = {Code as information and code as spectacle},",
				"   volume = {12},",
				"   issn = {1479-4713},",
				"   url = {https://doi.org/10.1080/14794713.2016.1227602},",
				"   doi = {10.1080/14794713.2016.1227602},",
				"   abstract = {In this artist statement, I will discuss the tension between source code as an interactive system for performers and source code as information and entertainment for audiences in live-coding performances. I then describe augmentations I developed for the presentation of source code in the live-coding environment Gibber, including animations and annotations that visually reveal aspects of system state during performances. I briefly describe audience responses to these techniques and, more importantly, how they are critical to my own artistic practice.},",
				"   number = {2},",
				"   urldate = {2022-03-24},",
				"   journal = {International Journal of Performance Arts and Digital Media},",
				"   author = {Roberts, Charles},",
				"   month = jul,",
				"   year = {2016},",
				"   keywords = {Live coding, psychology of programming, notation, audiences, algorithms},",
				"   pages = {201--206},",
				"}",
				""
			],
			"csl": {
				"DOI": "10.1080/14794713.2016.1227602",
				"ISSN": "1479-4713",
				"URL": "https://doi.org/10.1080/14794713.2016.1227602",
				"abstract": "In this artist statement, I will discuss the tension between source code as an interactive system for performers and source code as information and entertainment for audiences in live-coding performances. I then describe augmentations I developed for the presentation of source code in the live-coding environment Gibber, including animations and annotations that visually reveal aspects of system state during performances. I briefly describe audience responses to these techniques and, more importantly, how they are critical to my own artistic practice.",
				"accessed": {
					"date-parts": [
						[
							2022,
							3,
							24
						]
					]
				},
				"author": [
					{
						"family": "Roberts",
						"given": "Charles"
					}
				],
				"container-title": "International Journal of Performance Arts and Digital Media",
				"id": "https://www.tandfonline.com/doi/abs/10.1080/14794713.2016.1227602?journalCode_x61_rpdm20",
				"issue": "2",
				"issued": {
					"date-parts": [
						[
							2016,
							7
						]
					]
				},
				"keyword": "Live coding, psychology of programming, notation, audiences, algorithms",
				"page": "201-206",
				"title": "Code as information and code as spectacle",
				"type": "article-journal",
				"volume": "12"
			}
		},
		"https://zenodo.org/record/5788732": {
			"fetched": "2022-03-24T12:20:17.218Z",
			"bibtex": [
				"",
				"@misc{mclean_alternate_2021,",
				"   address = {Valdivia, Chile},",
				"   title = {Alternate {Timelines} for {TidalCycles}},",
				"   url = {https://zenodo.org/record/5788732},",
				"   abstract = {The TidalCycles (or Tidal for short) live coding environment has been developed since around 2009, via several rewrites of its core representation. Rather than having fixed goals, this development has been guided by use, motivated by the open aim to make music. This development process can be seen as a long-form improvisation, with insights into the nature of Tidal gained through the process of writing it, feeding back to guide the next steps of development. This brings the worrying thought that key insights will have been missed along this development journey, that would otherwise have lead to very different software. Indeed participants at beginners’ workshops that I have lead or co-lead have often asked questions without good answers, because they made deficiencies or missing features in the software clear. It is well known that a beginner’s mind is able to see much that an expert has become blind to. Running workshops are an excellent way to find new development ideas, but the present paper explores a different technique – the rewrite.},",
				"   urldate = {2022-03-24},",
				"   collaborator = {McLean, Alex},",
				"   month = dec,",
				"   year = {2021},",
				"   keywords = {live coding, algorithmic pattern, tidalcycles, haskell, python},",
				"}",
				""
			],
			"csl": {
				"URL": "https://zenodo.org/record/5788732",
				"abstract": "The TidalCycles (or Tidal for short) live coding environment has been developed since around 2009, via several rewrites of its core representation. Rather than having fixed goals, this development has been guided by use, motivated by the open aim to make music. This development process can be seen as a long-form improvisation, with insights into the nature of Tidal gained through the process of writing it, feeding back to guide the next steps of development. This brings the worrying thought that key insights will have been missed along this development journey, that would otherwise have lead to very different software. Indeed participants at beginners’ workshops that I have lead or co-lead have often asked questions without good answers, because they made deficiencies or missing features in the software clear. It is well known that a beginner’s mind is able to see much that an expert has become blind to. Running workshops are an excellent way to find new development ideas, but the present paper explores a different technique – the rewrite.",
				"accessed": {
					"date-parts": [
						[
							2022,
							3,
							24
						]
					]
				},
				"id": "https://zenodo.org/record/5788732",
				"issued": {
					"date-parts": [
						[
							2021,
							12
						]
					]
				},
				"keyword": "live coding, algorithmic pattern, tidalcycles, haskell, python",
				"publisher-place": "Valdivia, Chile",
				"title": "Alternate Timelines for TidalCycles",
				"type": ""
			}
		},
		"https://www.semanticscholar.org/paper/Bringing-the-TidalCycles-Mini-Notation-to-the-Roberts/74965efadd572ae3f40d14c633a5c8581c1b9f42": {
			"fetched": "2022-04-12T22:47:17.063Z",
			"bibtex": [
				"",
				"@misc{roberts_bringing_2019,",
				"   title = {Bringing the {TidalCycles} {Mini}-{Notation} to the {Browser}},",
				"   url = {https://www.semanticscholar.org/paper/Bringing-the-TidalCycles-Mini-Notation-to-the-Roberts/74965efadd572ae3f40d14c633a5c8581c1b9f42},",
				"   abstract = {A JavaScript dialect of its mini-notation for pattern is created, enabling easy integration with creative coding tools and an accompanying technique for visually annotating the playback of TidalCycles patterns over time. TidalCycles has rapidly become the most popular system for many styles of live coding performance, in particular Algoraves. We created a JavaScript dialect of its mini-notation for pattern, enabling easy integration with creative coding tools. Our research pairs a formalism describing the mini-notation with a small JavaScript library for generating events over time; this library is suitable for generating events inside of an AudioWorkletProcessor thread and for assisting with scheduling in JavaScript environments more generally. We describe integrating the library into the two live coding systems, Gibber and Hydra, and discuss an accompanying technique for visually annotating the playback of TidalCycles patterns over time.},",
				"   language = {en},",
				"   urldate = {2022-04-12},",
				"   journal = {www.semanticscholar.org},",
				"   author = {Roberts, Charles},",
				"   year = {2019},",
				"}",
				""
			],
			"csl": {
				"URL": "https://www.semanticscholar.org/paper/Bringing-the-TidalCycles-Mini-Notation-to-the-Roberts/74965efadd572ae3f40d14c633a5c8581c1b9f42",
				"abstract": "A JavaScript dialect of its mini-notation for pattern is created, enabling easy integration with creative coding tools and an accompanying technique for visually annotating the playback of TidalCycles patterns over time. TidalCycles has rapidly become the most popular system for many styles of live coding performance, in particular Algoraves. We created a JavaScript dialect of its mini-notation for pattern, enabling easy integration with creative coding tools. Our research pairs a formalism describing the mini-notation with a small JavaScript library for generating events over time; this library is suitable for generating events inside of an AudioWorkletProcessor thread and for assisting with scheduling in JavaScript environments more generally. We describe integrating the library into the two live coding systems, Gibber and Hydra, and discuss an accompanying technique for visually annotating the playback of TidalCycles patterns over time.",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							12
						]
					]
				},
				"author": [
					{
						"family": "Roberts",
						"given": "Charles"
					}
				],
				"container-title": "www.semanticscholar.org",
				"id": "https://www.semanticscholar.org/paper/Bringing-the-TidalCycles-Mini-Notation-to-the-Roberts/74965efadd572ae3f40d14c633a5c8581c1b9f42",
				"issued": {
					"date-parts": [
						[
							2019
						]
					]
				},
				"title": "Bringing the TidalCycles Mini-Notation to the Browser",
				"type": ""
			}
		},
		"https://zenodo.org/record/6456380": {
			"fetched": "2022-04-14T21:26:21.302Z",
			"bibtex": [
				"",
				"@misc{mclean_tidalvortex_2022,",
				"   address = {Limerick, Ireland},",
				"   title = {{TidalVortex} {Zero}},",
				"   url = {https://zenodo.org/record/6456380},",
				"   abstract = {In this paper we introduce ‘version zero’ of TidalVortex, an alternative implementation of the TidalCycles live coding system, using the Python programming language.  This is open-ended work, exploring what happens when we try to extract the 'essence' of a system like TidalCycles and translate it into another programming language, while taking advantage of the affordance of its new host. First, we review the substantial prior art in porting TidalCycles, and in representing musical patterns in Python. We then compare equivalent patterns written in Haskell (TidalCycles) and Python (TidalVortex), and relate implementation details of how functional reactive paradigms have translated from the pure functional, strongly typed Haskell to the more multi-paradigm, dynamically typed Python. Finally, we conclude with reflections and generalisable outcomes.},",
				"   urldate = {2022-04-14},",
				"   collaborator = {McLean, Alex and Forment, Raphaël and Le Beux, Sylvain and Silvani, Damián},",
				"   month = apr,",
				"   year = {2022},",
				"}",
				""
			],
			"csl": {
				"URL": "https://zenodo.org/record/6456380",
				"abstract": "In this paper we introduce “version zero” of TidalVortex, an alternative implementation of the TidalCycles live coding system, using the Python programming language.  This is open-ended work, exploring what happens when we try to extract the ’essence’ of a system like TidalCycles and translate it into another programming language, while taking advantage of the affordance of its new host. First, we review the substantial prior art in porting TidalCycles, and in representing musical patterns in Python. We then compare equivalent patterns written in Haskell (TidalCycles) and Python (TidalVortex), and relate implementation details of how functional reactive paradigms have translated from the pure functional, strongly typed Haskell to the more multi-paradigm, dynamically typed Python. Finally, we conclude with reflections and generalisable outcomes.",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							14
						]
					]
				},
				"id": "https://zenodo.org/record/6456380",
				"issued": {
					"date-parts": [
						[
							2022,
							4
						]
					]
				},
				"publisher-place": "Limerick, Ireland",
				"title": "TidalVortex Zero",
				"type": ""
			}
		},
		"https://zenodo.org/record/4299661": {
			"fetched": "2022-04-15T07:40:08.702Z",
			"bibtex": [
				"",
				"@misc{mclean_algorithmic_2020,",
				"   address = {Birmingham UK},",
				"   title = {Algorithmic {Pattern}},",
				"   url = {https://zenodo.org/record/4299661},",
				"   abstract = {This paper brings together two main perspectives on algorithmic pattern. First, the writing of musical patterns in live coding performance, and second, the weaving of patterns in textiles. In both cases, algorithmic pattern is an interface between the human and the outcome, where small changes have far-reaching impact on the results. By bringing contemporary live coding and ancient textile approaches together, we reach a common view of pattern as algorithmic movement (e.g. looping, shifting, reflecting, interfering) in the making of things. This works beyond the usual definition of pattern used in musical interfaces, of mere repeating sequences. We conclude by considering the place of algorithmic pattern in a wider activity of making.},",
				"   urldate = {2022-04-15},",
				"   collaborator = {McLean, Alex},",
				"   month = jul,",
				"   year = {2020},",
				"   keywords = {pattern, tidalcycles, algorithmic music, textiles, live coding, algorave},",
				"}",
				""
			],
			"csl": {
				"URL": "https://zenodo.org/record/4299661",
				"abstract": "This paper brings together two main perspectives on algorithmic pattern. First, the writing of musical patterns in live coding performance, and second, the weaving of patterns in textiles. In both cases, algorithmic pattern is an interface between the human and the outcome, where small changes have far-reaching impact on the results. By bringing contemporary live coding and ancient textile approaches together, we reach a common view of pattern as algorithmic movement (e.g. looping, shifting, reflecting, interfering) in the making of things. This works beyond the usual definition of pattern used in musical interfaces, of mere repeating sequences. We conclude by considering the place of algorithmic pattern in a wider activity of making.",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							15
						]
					]
				},
				"id": "https://zenodo.org/record/4299661",
				"issued": {
					"date-parts": [
						[
							2020,
							7
						]
					]
				},
				"keyword": "pattern, tidalcycles, algorithmic music, textiles, live coding, algorave",
				"publisher-place": "Birmingham UK",
				"title": "Algorithmic Pattern",
				"type": ""
			}
		},
		"https://quod.lib.umich.edu/i/icmc/bbp2372.2012.011/2/–gibber-live-coding-audio-in-the-browser?page=root;size=150;view=text": {
			"fetched": "2022-04-15T07:40:15.037Z",
			"bibtex": [
				"",
				"@article{charlie_gibber:_2012,",
				"   title = {{GIBBER}: {LIVE} {CODING} {AUDIO} {IN} {THE} {BROWSER}},",
				"   volume = {2012},",
				"   issn = {2223-3881},",
				"   url = {https://quod.lib.umich.edu/i/icmc/bbp2372.2012.011/2/%E2%80%93gibber-live-coding-audio-in-the-browser?page=root;size=150;view=text},",
				"   language = {en},",
				"   urldate = {2022-04-15},",
				"   journal = {International Computer Music Conference Proceedings},",
				"   author = {Charlie, , Roberts and Joann, , Kuchera-Morin},",
				"   year = {2012},",
				"}",
				""
			],
			"csl": {
				"ISSN": "2223-3881",
				"URL": "https://quod.lib.umich.edu/i/icmc/bbp2372.2012.011/2/%E2%80%93gibber-live-coding-audio-in-the-browser?page=root;size=150;view=text",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							15
						]
					]
				},
				"author": [
					{
						"family": "Charlie",
						"given": "Roberts"
					},
					{
						"family": "Joann",
						"given": "Kuchera-Morin"
					}
				],
				"container-title": "International Computer Music Conference Proceedings",
				"id": "https://quod.lib.umich.edu/i/icmc/bbp2372.2012.011/2/–gibber-live-coding-audio-in-the-browser?page_x61_root;size_x61_150;view_x61_text",
				"issued": {
					"date-parts": [
						[
							2012
						]
					]
				},
				"title": "GIBBER: LIVE CODING AUDIO IN THE BROWSER",
				"title-short": "GIBBER",
				"type": "article-journal",
				"volume": "2012"
			}
		},
		"https://www.semanticscholar.org/paper/Estuary%3A-Browser-based-Collaborative-Projectional-Ogborn-Beverley/c6b5d34575d6230dfd8751ca4af8e5f6e44d916b": {
			"fetched": "2022-04-15T07:40:17.179Z",
			"bibtex": [
				"",
				"@misc{ogborn_estuary:_2017,",
				"   title = {Estuary: {Browser}-based {Collaborative} {Projectional} {Live} {Coding} of {Musical} {Patterns}},",
				"   shorttitle = {Estuary},",
				"   url = {https://www.semanticscholar.org/paper/Estuary%3A-Browser-based-Collaborative-Projectional-Ogborn-Beverley/c6b5d34575d6230dfd8751ca4af8e5f6e44d916b},",
				"   abstract = {Estuary is a browser-based collaborative projectional editing environment built on top of the popular TidalCycles language for the live coding of musical pattern that includes a strict form of structure editing, a click-only border-free approach to interface design, and explicit notations to modulate the liveness of different parts of the code. This paper describes the initial design and development of Estuary, a browser-based collaborative projectional editing environment built on top of the popular TidalCycles language for the live coding of musical pattern. Key features of Estuary include a strict form of structure editing (making syntactical errors impossible), a click-only border-free approach to interface design, explicit notations to modulate the liveness of different parts of the code, and a server-based network collaboration system that can be used for many simultaneous collaborative live coding performances, as well as to present different views of the same live coding activity. Estuary has been developed using Reflex-DOM, a Haskell-based framework for web development whose strictness promises robustness and security advantages.},",
				"   language = {en},",
				"   urldate = {2022-04-15},",
				"   journal = {www.semanticscholar.org},",
				"   author = {Ogborn, David and Beverley, J.},",
				"   year = {2017},",
				"}",
				""
			],
			"csl": {
				"URL": "https://www.semanticscholar.org/paper/Estuary%3A-Browser-based-Collaborative-Projectional-Ogborn-Beverley/c6b5d34575d6230dfd8751ca4af8e5f6e44d916b",
				"abstract": "Estuary is a browser-based collaborative projectional editing environment built on top of the popular TidalCycles language for the live coding of musical pattern that includes a strict form of structure editing, a click-only border-free approach to interface design, and explicit notations to modulate the liveness of different parts of the code. This paper describes the initial design and development of Estuary, a browser-based collaborative projectional editing environment built on top of the popular TidalCycles language for the live coding of musical pattern. Key features of Estuary include a strict form of structure editing (making syntactical errors impossible), a click-only border-free approach to interface design, explicit notations to modulate the liveness of different parts of the code, and a server-based network collaboration system that can be used for many simultaneous collaborative live coding performances, as well as to present different views of the same live coding activity. Estuary has been developed using Reflex-DOM, a Haskell-based framework for web development whose strictness promises robustness and security advantages.",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							15
						]
					]
				},
				"author": [
					{
						"family": "Ogborn",
						"given": "David"
					},
					{
						"family": "Beverley",
						"given": "J."
					}
				],
				"container-title": "www.semanticscholar.org",
				"id": "https://www.semanticscholar.org/paper/Estuary_x37_3A-Browser-based-Collaborative-Projectional-Ogborn-Beverley/c6b5d34575d6230dfd8751ca4af8e5f6e44d916b",
				"issued": {
					"date-parts": [
						[
							2017
						]
					]
				},
				"title": "Estuary: Browser-based Collaborative Projectional Live Coding of Musical Patterns",
				"title-short": "Estuary",
				"type": ""
			}
		},
		"https://zenodo.org/record/6353969": {
			"fetched": "2022-04-15T07:40:20.966Z",
			"bibtex": [
				"",
				"@misc{mclean_feedforward_2020,",
				"   address = {Birmingham},",
				"   title = {Feedforward},",
				"   url = {https://zenodo.org/record/6353969},",
				"   abstract = {This is an improvised, from-scratch live coding performance. The NIME interface which this performance showcases is the new Feedfoward editor for the TidalCycles live coding environment. Feedforward is written in Haskell using the ncurses library for terminal-based user interfaces. It runs on low-powered hardware including the Raspberry Pi Zero, with formative testing of prototypes conducted with several groups of children between the ages of 8 and 14. Feedforward has a number of features designed to support improvised, multi-pattern live coding. Individual Tidal patterns are addressable with hotkeys for fast mute and unmuting. Each pattern has a stereo VU meter, to aid the quick matching of sound to pattern within a mix. In addition, TidalCycles has been extended to store context with each event, so that source code positions in its polyrhythmic sequence mini-notation are tracked. This allows steps to be highlighted in the source code when- ever they are active. This works even when Tidal combinators have been applied to manipulate the timeline. Formal evaluation has yet to take place, but this feature appears to support learning of how pattern manipulations work in Tidal. Feedforward and TidalCycles is free/open source software under a GPL licence version 3.0.},",
				"   urldate = {2022-04-15},",
				"   collaborator = {McLean, Alex},",
				"   month = jul,",
				"   year = {2020},",
				"}",
				""
			],
			"csl": {
				"URL": "https://zenodo.org/record/6353969",
				"abstract": "This is an improvised, from-scratch live coding performance. The NIME interface which this performance showcases is the new Feedfoward editor for the TidalCycles live coding environment. Feedforward is written in Haskell using the ncurses library for terminal-based user interfaces. It runs on low-powered hardware including the Raspberry Pi Zero, with formative testing of prototypes conducted with several groups of children between the ages of 8 and 14. Feedforward has a number of features designed to support improvised, multi-pattern live coding. Individual Tidal patterns are addressable with hotkeys for fast mute and unmuting. Each pattern has a stereo VU meter, to aid the quick matching of sound to pattern within a mix. In addition, TidalCycles has been extended to store context with each event, so that source code positions in its polyrhythmic sequence mini-notation are tracked. This allows steps to be highlighted in the source code when- ever they are active. This works even when Tidal combinators have been applied to manipulate the timeline. Formal evaluation has yet to take place, but this feature appears to support learning of how pattern manipulations work in Tidal. Feedforward and TidalCycles is free/open source software under a GPL licence version 3.0.",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							15
						]
					]
				},
				"id": "https://zenodo.org/record/6353969",
				"issued": {
					"date-parts": [
						[
							2020,
							7
						]
					]
				},
				"publisher-place": "Birmingham",
				"title": "Feedforward",
				"type": ""
			}
		},
		"https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.72.1340": {
			"fetched": "2022-04-24T21:09:16.724Z",
			"bibtex": [
				"",
				"@inproceedings{toussaint_euclidean_2005,",
				"   title = {The {Euclidean} algorithm generates traditional musical rhythms},",
				"   url = {https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.72.1340},",
				"   abstract = {The Euclidean algorithm (which comes down to us from Euclid’s Elements) computes the greatest common divisor of two given integers. It is shown here that the structure of the Euclidean algorithm may be used to automatically generate, very efficiently, a large family of rhythms used as timelines (rhythmic ostinatos), in traditional world music. These rhythms, here dubbed Euclidean rhythms, have the property that their onset patterns are distributed as evenly as possible in a mathematically precise sense, and optimal manner. Euclidean rhythms are closely related to the family of Aksak rhythms studied by ethnomusicologists, and occur in a wide variety of other disciplines as well. For example they characterize algorithms for drawing digital straight lines in computer graphics, as well as algorithms for calculating leap years in calendar design. Euclidean rhythms also find application in nuclear physics accelerators and in computer science, and are closely related to several families of words and sequences of interest in the study of the combinatorics of words, such as mechanical words, Sturmian words, two-distance sequences, and Euclidean strings, to which the Euclidean rhythms are compared. 1.},",
				"   urldate = {2022-04-24},",
				"   booktitle = {In {Proceedings} of {BRIDGES}: {Mathematical} {Connections} in {Art}, {Music} and {Science}},",
				"   author = {Toussaint, Godfried},",
				"   year = {2005},",
				"   pages = {47--56},",
				"}",
				""
			],
			"csl": {
				"URL": "https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.72.1340",
				"abstract": "The Euclidean algorithm (which comes down to us from Euclid’s Elements) computes the greatest common divisor of two given integers. It is shown here that the structure of the Euclidean algorithm may be used to automatically generate, very efficiently, a large family of rhythms used as timelines (rhythmic ostinatos), in traditional world music. These rhythms, here dubbed Euclidean rhythms, have the property that their onset patterns are distributed as evenly as possible in a mathematically precise sense, and optimal manner. Euclidean rhythms are closely related to the family of Aksak rhythms studied by ethnomusicologists, and occur in a wide variety of other disciplines as well. For example they characterize algorithms for drawing digital straight lines in computer graphics, as well as algorithms for calculating leap years in calendar design. Euclidean rhythms also find application in nuclear physics accelerators and in computer science, and are closely related to several families of words and sequences of interest in the study of the combinatorics of words, such as mechanical words, Sturmian words, two-distance sequences, and Euclidean strings, to which the Euclidean rhythms are compared. 1.",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							24
						]
					]
				},
				"author": [
					{
						"family": "Toussaint",
						"given": "Godfried"
					}
				],
				"container-title": "In Proceedings of BRIDGES: Mathematical Connections in Art, Music and Science",
				"id": "https://citeseerx.ist.psu.edu/viewdoc/summary?doi_x61_10.1.1.72.1340",
				"issued": {
					"date-parts": [
						[
							2005
						]
					]
				},
				"page": "47-56",
				"title": "The Euclidean algorithm generates traditional musical rhythms",
				"type": "paper-conference"
			}
		},
		"https://webaudioconf.com/posts/2021_8/": {
			"fetched": "2022-04-24T21:14:10.409Z",
			"bibtex": [
				"",
				"@misc{noauthor_wac_nodate,",
				"   title = {{WAC} {\\textbar} {Glicol}: {A} {Graph}-oriented {Live} {Coding} {Language} {Developed} with {Rust}, {WebAssembly} and {AudioWorklet}},",
				"   url = {https://webaudioconf.com/posts/2021_8/},",
				"   urldate = {2022-04-24},",
				"   journal = {webaudioconf.com},",
				"}",
				""
			],
			"csl": {
				"URL": "https://webaudioconf.com/posts/2021_8/",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							24
						]
					]
				},
				"container-title": "webaudioconf.com",
				"id": "https://webaudioconf.com/posts/2021_8/",
				"title": "WAC  Glicol: A Graph-oriented Live Coding Language Developed with Rust, WebAssembly and AudioWorklet",
				"title-short": "WAC  Glicol",
				"type": ""
			}
		},
		"https://webaudioconf.com/posts/2019_38/": {
			"fetched": "2022-04-24T21:14:46.954Z",
			"bibtex": [
				"",
				"@misc{noauthor_wac_nodate,",
				"   title = {{WAC} {\\textbar} {FAUST} online {IDE}: dynamically compile and publish {FAUST} code as {WebAudio} {Plugins}},",
				"   url = {https://webaudioconf.com/posts/2019_38/},",
				"   urldate = {2022-04-24},",
				"   journal = {webaudioconf.com},",
				"}",
				""
			],
			"csl": {
				"URL": "https://webaudioconf.com/posts/2019_38/",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							24
						]
					]
				},
				"container-title": "webaudioconf.com",
				"id": "https://webaudioconf.com/posts/2019_38/",
				"title": "WAC  FAUST online IDE: Dynamically compile and publish FAUST code as WebAudio Plugins",
				"title-short": "WAC  FAUST online IDE",
				"type": ""
			}
		},
		"https://strudel.tidalcycles.org": {
			"fetched": "2022-04-24T21:14:47.822Z",
			"bibtex": [
				"",
				"@misc{noauthor_strudel_nodate,",
				"   title = {Strudel {REPL}},",
				"   url = {https://strudel.tidalcycles.org/},",
				"   abstract = {Strudel REPL},",
				"   urldate = {2022-04-24},",
				"   journal = {strudel.tidalcycles.org},",
				"}",
				""
			],
			"csl": {
				"URL": "https://strudel.tidalcycles.org/",
				"abstract": "Strudel REPL",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							24
						]
					]
				},
				"container-title": "strudel.tidalcycles.org",
				"id": "https://strudel.tidalcycles.org",
				"title": "Strudel REPL",
				"type": ""
			}
		},
		"https://hydra.ojack.xyz/docs/#/": {
			"fetched": "2022-04-25T09:03:25.132Z",
			"bibtex": [
				"",
				"@misc{noauthor_hydra_nodate,",
				"   title = {Hydra},",
				"   url = {https://hydra.ojack.xyz/docs/#/},",
				"   abstract = {Description},",
				"   urldate = {2022-04-25},",
				"   journal = {hydra.ojack.xyz},",
				"}",
				""
			],
			"csl": {
				"URL": "https://hydra.ojack.xyz/docs/#/",
				"abstract": "Description",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							25
						]
					]
				},
				"container-title": "hydra.ojack.xyz",
				"id": "https://hydra.ojack.xyz/docs/_x35_/",
				"title": "Hydra",
				"type": ""
			}
		},
		"https://mikesol.github.io/purescript-wags/": {
			"fetched": "2022-04-25T09:03:26.456Z",
			"bibtex": [
				"",
				"@misc{noauthor_wags_nodate,",
				"   title = {Wags documentation},",
				"   url = {https://mikesol.github.io/purescript-wags/},",
				"   urldate = {2022-04-25},",
				"   journal = {mikesol.github.io},",
				"}",
				""
			],
			"csl": {
				"URL": "https://mikesol.github.io/purescript-wags/",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							25
						]
					]
				},
				"container-title": "mikesol.github.io",
				"id": "https://mikesol.github.io/purescript-wags/",
				"title": "Wags documentation",
				"type": ""
			}
		},
		"https://github.com/tidalcycles/strudel": {
			"fetched": "2022-04-25T09:15:32.518Z",
			"bibtex": [
				"",
				"@misc{noauthor_strudel_2022,",
				"   title = {strudel},",
				"   copyright = {GPL-3.0},",
				"   url = {https://github.com/tidalcycles/strudel},",
				"   abstract = {Experimental port of tidalcycles to Javascript},",
				"   urldate = {2022-04-25},",
				"   publisher = {TidalCycles},",
				"   month = apr,",
				"   year = {2022},",
				"   note = {original-date: 2022-01-22T20:24:35Z},",
				"   keywords = {javascript, livecoding, tidal, tidalcycles, algorave, algorithmic-patterns},",
				"}",
				""
			],
			"csl": {
				"URL": "https://github.com/tidalcycles/strudel",
				"abstract": "Experimental port of tidalcycles to Javascript",
				"accessed": {
					"date-parts": [
						[
							2022,
							4,
							25
						]
					]
				},
				"id": "https://github.com/tidalcycles/strudel",
				"issued": {
					"date-parts": [
						[
							2022,
							4
						]
					]
				},
				"keyword": "javascript, livecoding, tidal, tidalcycles, algorave, algorithmic-patterns",
				"note": "original-date: 2022-01-22T20:24:35Z",
				"publisher": "TidalCycles",
				"title": "Strudel",
				"type": ""
			}
		}
	}
}